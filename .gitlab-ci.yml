image: golang:1.19-alpine

variables:
  MILESTONE: "v0.1.0"
  CGO_ENABLED: 0
  GOOS: "linux"
  GOARCH: "amd64"
  GOLINT_VERSION: "v1.48.0"
  RELEASE_CLI_VERSION: "v0.8.0"
  DEVELOPER_BRANCH: "features"
  LINUX_AMD64_BINARY: "$CI_PROJECT_NAME-linux-amd64-${CI_COMMIT_TAG}"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$CI_PROJECT_NAME/${CI_COMMIT_TAG}/"

stages:
  - test
  - build
  - upload
  - release
  - push

pre_checks:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
  rules:
    - if: $CI_COMMIT_BRANCH == $DEVELOPER_BRANCH

lint_code:
  image: golangci/golangci-lint:$GOLINT_VERSION
  stage: test
  allow_failure: true
  script:
    - golangci-lint run -v
  rules:
    - if: $CI_COMMIT_BRANCH == $DEVELOPER_BRANCH

unit_tests:
  stage: test
  script:
    - go test -short $(go list ./... | grep -v /vendor/)
  rules:
    - if: $CI_COMMIT_BRANCH == $DEVELOPER_BRANCH

race_detector:
  stage: test
  variables:
    CGO_ENABLED: 1
  script:
    - apk add --no-cache build-base
    - go test -race -short $(go list ./... | grep -v /vendor/)
  rules:
    - if: $CI_COMMIT_BRANCH == $DEVELOPER_BRANCH

build:
  stage: build
  script:
    - mkdir -p bin
    - sed -i -e "s/@@gittag@@-@@gitcommit@@/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA/" main.go
    - go build -mod vendor -v -o bin/$LINUX_AMD64_BINARY $CI_PROJECT_NAME
  artifacts:
    paths:
      - bin/

upload:
  stage: upload
  image: curlimages/curl:latest
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file bin/${LINUX_AMD64_BINARY} ${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}
  rules:
    - if: $CI_COMMIT_TAG

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:$RELEASE_CLI_VERSION
  script:
    - >
      release-cli create
      --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG
      --assets-link "{\"name\":\"${LINUX_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}\"}"
  rules:
    - if: $CI_COMMIT_TAG

docker:
  image: docker:20
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  stage: build
  script:
    - sed -i -e "s/@@gittag@@-@@gitcommit@@/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA/" main.go
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --cache-from $CI_REGISTRY_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

push_latest:
  image: docker:20
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  variables:
    GIT_STRATEGY: none
  stage: push
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker_tag="latest"
      else
        docker_tag="dev"
      fi
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$docker_tag
    - docker push $CI_REGISTRY_IMAGE:$docker_tag

push_tag:
  image: docker:20
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  variables:
    GIT_STRATEGY: none
  stage: push
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  rules:
    - if: $CI_COMMIT_TAG
